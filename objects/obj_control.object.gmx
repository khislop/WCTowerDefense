<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Instantiate global state vars
global.in_wave = false;
global.wave_num = 0;
global.current_tower = noone;

// We can change how we do this, but right now there are too many things that need to know the enemy speed (which isn't saved in the object cause paths are dumb).
//global.enemy_speed = 5;

// Create initial vars
cost = 5;
player_hp = 5;
money = 500;
can_start = false;
alarm[0] = 100;
// Run setup scripts
scr_price();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_start = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (player_hp == 0)
   room_goto(rm_game_over);
if (global.wave_num == 10){
   if (global.in_wave == false &amp;&amp; !instance_exists(obj_enemy))
        room_goto(rm_congrat);}
    
   
   
   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select tower from menu

// Tower width/height incase that changes. Currenlty all towers are 32*32
tower_width = 32;
tower_height = 32;

if(mouse_check_button_pressed(mb_left)){
    for(i = 0; i &lt; array_length_1d(global.tower); i += 1){
        if(mouse_x &gt; ((button_margin_v * (i + 1)) - ((tower_width) / 2)) &amp;&amp; mouse_x &lt; ((button_margin_v * (i + 1)) + ((tower_width) / 2))){
            if(mouse_y &gt; (room_height - button_margin_h) - (tower_height/2) &amp;&amp; mouse_y &lt; (room_height - button_margin_h) + (tower_height/2)){
                //global.current_tower = global.tower[i];
                global.current_tower = i;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Spawn tower where clicked
// We will want to change this with less hard coded numbers.

// Set which tower we went to create
if(global.current_tower != noone){
    tower = global.tower[global.current_tower];
    // Not clicking a tower
    //if (money &gt;= global.price[global.current_tower] and !collision_point(mouse_x, mouse_y, tower, false, true) and !collision_point(mouse_x, mouse_y, obj_gold, false, true)) {
    if (money &gt;= global.price[global.current_tower] and (instance_position(mouse_x,mouse_y,obj_gold) == noone) and !collision_point(mouse_x, mouse_y, tower, false, true)) {
        // Not clicking menu
        if (mouse_y &lt; room_height - menu_height){
            instance_create((floor(mouse_x / 32) * 32 + 16),(floor(mouse_y / 32) * 32 + 16),tower);
            money -= global.price[global.current_tower];
        }
    }
}

// Add towers as walls to the pathing grid
mp_grid_add_instances(global.grid, obj_tower, true);
mp_grid_add_instances(global.grid, obj_wall, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw grid lines

draw_set_color(c_gray);

x = 0;
y = 0;

while(x &lt; window_get_width()){
    draw_line(x, 0, x, window_get_height());
    x = x + 32;
}

while(y &lt; window_get_height()){
    draw_line(0, y, window_get_width(), y);
    y = y + 32;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player vars

// Display the money
draw_set_font(-1);
draw_set_colour(c_yellow);
//draw_text_colour(128,64,"Money: " + string(money), c_yellow, c_yellow, c_yellow, c_yellow, 1);
draw_text_transformed(128,64,"Money: " + string(money), 2, 2, 0)
// Draw the HP
for (var i = 0; i &lt; player_hp;i++)
{
    draw_sprite(spr_playerHp,0, i*32,0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw tower menu

// Menu vars
menu_height = 96;
button_margin_v = 48;
button_margin_h = 48;
text_margin_h = 16;

// Set halign/valign
draw_set_valign(fa_center);
draw_set_halign(fa_center);

// Draw menu
draw_rectangle_colour(0, room_height - menu_height, room_width, room_height, c_black, c_black, c_black, c_black, c_black);

for(i = 0; i &lt; array_length_1d(global.tower); i += 1){
    //draw_sprite(global.tower[i], 0, button_margin_v * (i + 1), room_height - button_margin_h);
    draw_sprite(object_get_sprite(global.tower[i]), 0, button_margin_v * (i + 1), room_height - button_margin_h);

    
    draw_set_color(c_white);
    draw_text(button_margin_v * (i + 1), room_height - text_margin_h, global.price[i]);
    
}

// Borders around button if selected
for(i = 0; i &lt; array_length_1d(global.tower); i += 1){
    if(global.current_tower == i){
        draw_set_color(c_white);
        draw_rectangle(((button_margin_v * (i + 1)) - ((tower_width) / 2)), (room_height - button_margin_h) - (tower_height/2), ((button_margin_v * (i + 1)) + ((tower_width) / 2)), (room_height - button_margin_h) + (tower_height/2), true);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
